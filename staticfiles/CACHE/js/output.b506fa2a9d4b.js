document.addEventListener('DOMContentLoaded',()=>{const typed=new Typed('#desktop-search-input',{strings:['Search product name','Search product category','Search product subcategory','Shop now!'],typeSpeed:50,backSpeed:30,backDelay:1000,loop:true,attr:'placeholder',bindInputFocusEvents:true,});});document.addEventListener("DOMContentLoaded",()=>{const navHeader=document.querySelector(".nav-header");window.addEventListener("scroll",()=>{if(window.scrollY>100){navHeader.classList.add("scroll-active");}else{navHeader.classList.remove("scroll-active");}});});document.addEventListener("DOMContentLoaded",function(){const menuCategory=document.getElementById("menu-category");const sidebarMenu=document.getElementById("sidebar-menu");const closeSidebar=document.getElementById("close-sidebar");menuCategory.addEventListener("click",function(){sidebarMenu.classList.add("active");});closeSidebar.addEventListener("click",function(){sidebarMenu.classList.remove("active");});window.addEventListener("click",function(e){if(!sidebarMenu.contains(e.target)&&e.target!==menuCategory){sidebarMenu.classList.remove("active");}});});document.addEventListener("DOMContentLoaded",()=>{const toggles=document.querySelectorAll(".sidebar-dropdown-toggle");toggles.forEach((toggle)=>{toggle.addEventListener("click",(e)=>{const dropdownMenu=toggle.closest(".list-group-item").querySelector(".sidebar-dropdown-menu");const icon=toggle.querySelector("i");document.querySelectorAll(".sidebar-dropdown-menu").forEach((menu)=>{if(menu!==dropdownMenu){menu.style.display="none";const otherIcon=menu.previousElementSibling.querySelector("i");if(otherIcon){otherIcon.classList.remove("active");}}});if(dropdownMenu){dropdownMenu.style.display=dropdownMenu.style.display==="block"?"none":"block";icon.classList.toggle("active");}});});});document.addEventListener("DOMContentLoaded",function(){fetch("/get-cart-count/").then(response=>response.json()).then(data=>{let cartCountElements=document.querySelectorAll(".cart-count");cartCountElements.forEach(function(element){element.textContent=data.cart_count;});}).catch(error=>console.error("Error fetching cart count:",error));document.addEventListener("click",function(event){const addToCartBtn=event.target.closest(".add-to-cartt");if(addToCartBtn){event.preventDefault();let productId=addToCartBtn.dataset.product;let quantity=1;const quantityInput=document.querySelector("#cart-quantity");if(quantityInput){quantity=parseInt(quantityInput.value);}
let size=null;let color=null;const sizeInput=document.querySelector('input[name="size"]:checked');const colorInput=document.querySelector('input[name="color"]:checked');if(sizeInput)size=sizeInput.value;if(colorInput)color=colorInput.value;fetch("/add-to-cart/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":getCSRFToken(),},body:JSON.stringify({product_id:productId,quantity:quantity,size:size,color:color}),}).then((response)=>response.json()).then((data)=>{if(data.status==="success"){updateCartUI(data);showToast(data.message);}else{alert("Error: "+data.message);}}).catch(error=>console.error("Error:",error));}});document.addEventListener("click",function(event){const buyNowBtn=event.target.closest(".buy-noww");if(buyNowBtn){event.preventDefault();const productId=buyNowBtn.dataset.product;let quantity=1;const quantityInput=document.querySelector("#cart-quantity");if(quantityInput){quantity=parseInt(quantityInput.value);}
let size=null;let color=null;const sizeInput=document.querySelector('input[name="size"]:checked');const colorInput=document.querySelector('input[name="color"]:checked');if(sizeInput)size=sizeInput.value;if(colorInput)color=colorInput.value;fetch("/buy-now/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":getCSRFToken(),},body:JSON.stringify({product_id:productId,quantity:quantity,size:size,color:color}),}).then((response)=>response.json()).then((data)=>{if(data.status==="success"){window.location.href=data.redirect_url;}else{alert("Error: "+data.message);}}).catch(error=>console.error("Error:",error));}});document.querySelectorAll(".quantity-product-button").forEach((button)=>{button.addEventListener("click",function(){const quantityInput=document.querySelector("#cart-quantity");let quantity=parseInt(quantityInput.value);if(this.classList.contains("increment-button")){quantity+=1;}else if(this.classList.contains("decrement-button")){quantity=Math.max(1,quantity-1);}
quantityInput.value=quantity;});});function updateCartUI(data){let cartCountElements=document.querySelectorAll(".cart-count");cartCountElements.forEach(function(element){element.textContent=data.cart_count;});}
function getCSRFToken(){let tokenElement=document.querySelector("[name=csrfmiddlewaretoken]");return tokenElement?tokenElement.value:"";}});document.addEventListener("DOMContentLoaded",function(){const cartIconButton=document.querySelectorAll(".cart-side-menu");const cartSidebarMenu=document.getElementById("cart-sidebar-menu");const cartCloseBtn=document.getElementById("cart-close-sidebar");const cartItemList=document.querySelector(".cart-item-list");const overlay=document.getElementById("overlay");async function updateCartItemQuantity(itemId,quantity){if(!itemId||itemId==="undefined"){console.error("Invalid item ID received:",itemId);return{status:"error",message:"Invalid cart item"};}
try{const response=await fetch("/update-cart/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":getCSRFToken(),},body:JSON.stringify({item_id:itemId,quantity:quantity}),});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to update quantity');}
return await response.json();}catch(error){console.error("Error updating cart item:",{error:error,itemId:itemId,quantity:quantity});return{status:"error",message:error.message||"Failed to update quantity"};}}
function getCSRFToken(){const cookieValue=document.cookie.split('; ').find(row=>row.startsWith('csrftoken='))?.split('=')[1];return cookieValue||'';}
function updateSubtotal(){let subtotal=0;document.querySelectorAll(".cart-item").forEach((item)=>{const totalPriceElement=item.querySelector(".item-total-price");if(totalPriceElement){subtotal+=extractPrice(totalPriceElement.textContent);}});document.querySelector(".cart-subtotal span").textContent=`${subtotal.toFixed(2)} tk`;}
function extractPrice(text){if(!text)return 0;const priceStr=text.toString().replace(/[^\d.]/g,'');const price=parseFloat(priceStr);return isNaN(price)?0:price;}
function attachEventListeners(){document.querySelectorAll(".quantity-product-button").forEach((button)=>{button.addEventListener("click",async function(event){event.preventDefault();const card=this.closest(".card");const quantityInput=card.querySelector(".cart-quantity");const itemId=card.dataset.itemId;if(!itemId){alert("Error: Item ID is missing from the card element");return;}
let quantity=parseInt(quantityInput.value)||1;if(this.classList.contains("increment-button")){quantity+=1;}else if(this.classList.contains("decrement-button")){quantity=Math.max(1,quantity-1);}
quantityInput.value=quantity;try{this.disabled=true;const originalHTML=this.innerHTML;const result=await updateCartItemQuantity(itemId,quantity);if(result.status==="success"){const unitPrice=extractPrice(card.querySelector(".unit-price").textContent);card.querySelector(".item-total-price").textContent=(unitPrice*quantity).toFixed(2);updateSubtotal();}else{alert(result.message);quantityInput.value=quantity-(this.classList.contains("increment-button")?1:-1);}}catch(error){console.error("Error:",error);alert("Failed to update quantity. Please try again.");}finally{this.disabled=false;this.innerHTML=originalHTML;}});});document.querySelectorAll(".remove-item-button").forEach((button)=>{button.addEventListener("click",function(event){event.preventDefault();const itemId=this.dataset.itemId;if(!itemId){alert("Error: Item ID is missing.");return;}
fetch("/remove-from-cart/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":"{{ csrf_token }}",},body:JSON.stringify({item_id:itemId}),}).then((response)=>response.json()).then((data)=>{if(data.status==="success"){this.closest(".card").remove();updateSubtotal();updateCartCount(data.cart_count);showToast(data.message);}else{alert("Error: "+data.message);}}).catch((error)=>console.error("Error:",error));});});function updateCartCount(newCount){const cartCountElement=document.querySelector(".cart-count");if(cartCountElement){cartCountElement.textContent=newCount;}}
document.querySelector(".cart-subtotal-button")?.addEventListener("click",async function(event){event.preventDefault();const button=this;button.disabled=true;try{const updates=Array.from(document.querySelectorAll(".card")).map(async(card)=>{const itemId=card.dataset.itemId;const quantity=parseInt(card.querySelector(".cart-quantity").value)||1;return updateCartItemQuantity(itemId,quantity);});await Promise.all(updates);window.location.href="/checkout/";}catch(error){console.error("Error updating quantities:",error);alert("Failed to update quantities. Please try again.");button.disabled=false;button.innerHTML='<a href="/checkout/">Go to checkout</a>';}});}
async function fetchCartData(){try{const response=await fetch("/cart/");if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}
const data=await response.json();const cartItems=data.cart_items;const cartTotal=data.cart_total;cartItemList.innerHTML="";cartItems.forEach((item)=>{const cartItemElement=document.createElement("div");cartItemElement.classList.add("cart-item");cartItemElement.innerHTML=`
                    <div class="card mb-3" data-product-id="${item.product_id}" data-item-id="${item.id}" style="border: none; border-bottom: 1px solid #f6e7e5;">
                        <div class="row g-0 align-items-center d-flex flex-nowrap">
                            <div class="col-3 d-flex justify-content-center">
                                <img src="${item.product_image}" class="img-fluid rounded-start" alt="${item.product_name}" style="height: 80px; width: 80px; object-fit: cover;">
                            </div>
                            <div class="col-9">
                                <div class="card-body p-2">
                                    <h5 class="custom-card-title" style="font-size: 14px;">${item.product_name}</h5>
                                    <div class="d-flex align-items-center justify-content-between w-100 mb-2">
                                        <!-- Left Side: Quantity Buttons -->
                                        <div class="quantity d-flex align-items-center">
                                            <button class="quantity-product-button decrement-button"><i class="bi bi-dash"></i></button>
                                            <input type="number" class="cart-quantity text-center mx-1" value="${item.quantity}" min="1" style="width: 40px;">
                                            <button class="quantity-product-button increment-button"><i class="bi bi-plus"></i></button>
                                        </div>
                                        
                                        <!-- Right Side: Remove Button -->
                                        <button class="btn btn-danger btn-sm remove-item-button" data-item-id="${item.id}">
                                            <i class="bi bi-trash-fill"></i> Remove
                                        </button>
                                    </div>
                                    
                                    ${item.product_type === 'clothes' ? `<div class="d-flex checkout-price"style="gap: 10px;"><p class="card-text mb-1"style="font-size: 12px;">Size:${item.product_size}</p><p class="card-text mb-1"style="font-size: 12px;">Color:${item.product_color}</p></div>` : ''}
                                    
                                    <div class="d-flex checkout-price" style="gap: 10px;">
                                        <p class="card-text">Unit Price: <span class="unit-price">${item.product_price}</span></p>
                                <p class="card-text">Total Price: <span class="item-total-price">${(item.product_price * item.quantity).toFixed(2)}</span></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    `;cartItemList.appendChild(cartItemElement);});const cartTotalElement=document.createElement("div");cartTotalElement.classList.add("cart-total");cartTotalElement.innerHTML=`
                                <div class="subtotal mt-5">
                                <div class="cart-subtotal">
                                    <p>Subtotal: <span class="subtotal-amount">${cartTotal} tk</span></p>
                                    <button class="cart-subtotal-button">
                                        <a href="/checkout/">Go to Checkout</a>
                                    </button>
                                </div>
                            </div>
                `;cartItemList.appendChild(cartTotalElement);attachEventListeners();}catch(error){console.error("Error fetching cart data:",error);}}
cartIconButton.forEach(button=>{button.addEventListener("click",function(e){e.stopPropagation();cartSidebarMenu.classList.add("active");overlay.classList.add("active");fetchCartData();});});cartCloseBtn.addEventListener("click",function(e){e.stopPropagation();cartSidebarMenu.classList.remove("active");overlay.classList.remove("active");});overlay.addEventListener("click",function(e){e.stopPropagation();cartSidebarMenu.classList.remove("active");overlay.classList.remove("active");});cartSidebarMenu.addEventListener("click",function(e){e.stopPropagation();});[cartSidebarMenu,overlay,cartCloseBtn,...cartIconButton].forEach(el=>{el.addEventListener("click",function(e){e.stopImmediatePropagation();});});});document.addEventListener("DOMContentLoaded",function(){const csrfToken=document.querySelector('input[name="csrfmiddlewaretoken"]')?.value||'';const getPrice=(text)=>{const price=parseFloat(text.replace(/[^\d.]/g,''));return isNaN(price)?0:price;};const showMessage=(element,message,color)=>{if(!element)return;element.textContent=message;element.style.color=color;element.style.display=message?'block':'none';};const updateQuantityOnServer=async(itemId,quantity)=>{try{const response=await fetch("/update-cart/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":csrfToken},body:JSON.stringify({item_id:itemId,quantity}),});if(!response.ok)throw new Error('Network response was not ok');const data=await response.json();return data.status==="success";}catch(err){console.error("Update quantity failed:",err);return false;}};const handleQuantityChange=async(input,increment=0)=>{const card=input.closest(".card");if(!card)return;const itemId=card.dataset.itemId;const unitPriceElement=card.querySelector(".unit-price");if(!itemId||!unitPriceElement)return;const unitPrice=parseFloat(unitPriceElement.dataset.unitPrice||getPrice(unitPriceElement.textContent));const totalPriceElement=card.querySelector(".item-total-price");let quantity=parseInt(input.value)||1;quantity=Math.max(1,quantity+increment);input.value=quantity;if(totalPriceElement){totalPriceElement.textContent=`৳${(unitPrice * quantity).toFixed(2)}`;}
const success=await updateQuantityOnServer(itemId,quantity);if(!success){quantity=Math.max(1,parseInt(input.dataset.oldValue)||1);input.value=quantity;if(totalPriceElement){totalPriceElement.textContent=`৳${(unitPrice * quantity).toFixed(2)}`;}}
updateSubtotal();};const updateSubtotal=()=>{let subtotal=0;document.querySelectorAll(".item-total-price").forEach(item=>{subtotal+=getPrice(item.textContent);});const subtotalElement=document.getElementById("subtotal");if(subtotalElement){subtotalElement.textContent=`৳${subtotal.toFixed(2)}`;}
updateGrandTotal();};const updateGrandTotal=()=>{const subtotalElement=document.getElementById("subtotal");const deliveryCostElement=document.getElementById("delivery-cost");const discountInfo=document.getElementById("discount-info");const grandTotalElement=document.getElementById("grand-total");if(!subtotalElement||!deliveryCostElement||!grandTotalElement)return;const subtotal=getPrice(subtotalElement.textContent);const deliveryCost=getPrice(deliveryCostElement.textContent);let grandTotal=subtotal+deliveryCost;if(window.activePromoCode){let discount=0;if(window.activePromoCode.discount_type==='percentage'){discount=subtotal*(window.activePromoCode.discount_value/100);}else{discount=Math.min(window.activePromoCode.discount_value,subtotal);}
grandTotal=Math.max(0,subtotal-discount+deliveryCost);const discountValueElement=document.getElementById("discount-value");if(discountValueElement){discountValueElement.textContent=`-৳${discount.toFixed(2)}`;}
if(discountInfo){discountInfo.style.display='flex';}}else if(discountInfo){discountInfo.style.display='none';}
grandTotalElement.textContent=`৳${grandTotal.toFixed(2)}`;};const applyPromoCode=async()=>{const promoCodeInput=document.getElementById('promo-code-input');const applyPromoBtn=document.getElementById('apply-promo-btn');const promoMessage=document.getElementById('promo-code-message');if(!promoCodeInput||!applyPromoBtn||!promoMessage)return;const code=promoCodeInput.value.trim();if(!code){showMessage(promoMessage,'Please enter a promo code','red');return;}
showMessage(promoMessage,'','');const activePromo=document.getElementById('active-promo');if(activePromo)activePromo.remove();applyPromoBtn.disabled=true;applyPromoBtn.innerHTML=`<span class="spinner-border spinner-border-sm"></span> Applying...`;try{const response=await fetch('/apply-promo-code/',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRFToken':csrfToken},body:`code=${encodeURIComponent(code)}`});if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);const data=await response.json();if(data.success){window.activePromoCode=data.promo_data;const promoContainer=document.querySelector('.promocode-container');if(promoContainer){const successDiv=document.createElement('div');successDiv.className='alert alert-success mt-2';successDiv.id='active-promo';successDiv.innerHTML=`
                            Promo code <strong>${data.promo_data.code}</strong> applied!
                            <button class="btn btn-sm btn-link p-0" id="remove-promo-btn">Remove</button>
                        `;promoContainer.appendChild(successDiv);document.getElementById('remove-promo-btn')?.addEventListener('click',removePromoCode);}
updateGrandTotal();}else{showMessage(promoMessage,data.message||'Invalid promo code','red');}}catch(error){console.error('Promo code error:',error);showMessage(promoMessage,'Failed to apply promo code. Please try again.','red');}finally{applyPromoBtn.disabled=false;applyPromoBtn.textContent='Apply';}};const removePromoCode=async()=>{const promoMessage=document.getElementById('promo-code-message');try{const response=await fetch('/remove-promo-code/',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','X-CSRFToken':csrfToken}});if(!response.ok)throw new Error('Network error');const data=await response.json();if(data.success){window.activePromoCode=null;document.getElementById('active-promo')?.remove();updateGrandTotal();}else{showMessage(promoMessage,'Failed to remove promo code','red');}}catch(error){console.error('Remove promo error:',error);showMessage(promoMessage,'Failed to remove promo code','red');}};const removeCartItem=(button)=>{const card=button.closest(".card");if(!card)return;const itemId=button.dataset.itemId;if(!itemId)return;card.style.display='none';fetch("/remove-from-cart/",{method:"POST",headers:{"Content-Type":"application/json","X-CSRFToken":csrfToken},body:JSON.stringify({item_id:itemId}),}).then(res=>{if(!res.ok)throw new Error('Network response was not ok');return res.json();}).then(data=>{if(data.status==="success"){card.remove();updateSubtotal();updateCartCount(data.cart_count);showToast(data.message);}else{card.style.display='';alert(data.message||'Failed to remove item');}}).catch(err=>{console.error("Remove item failed:",err);card.style.display='';});};const updateCartCount=(newCount)=>{const cartCountElement=document.querySelector(".cart-count");if(cartCountElement){cartCountElement.textContent=newCount;}};const initializeCart=()=>{document.querySelectorAll(".cart-quantity").forEach(input=>{input.dataset.oldValue=input.value;input.addEventListener("change",()=>handleQuantityChange(input));});document.querySelectorAll(".increment-button").forEach(btn=>{btn.addEventListener("click",()=>{const input=btn.closest(".card")?.querySelector(".cart-quantity");if(input)handleQuantityChange(input,1);});});document.querySelectorAll(".decrement-button").forEach(btn=>{btn.addEventListener("click",()=>{const input=btn.closest(".card")?.querySelector(".cart-quantity");if(input)handleQuantityChange(input,-1);});});document.querySelectorAll(".remove-item-button").forEach(btn=>{btn.addEventListener("click",(e)=>{e.preventDefault();removeCartItem(btn);});});document.getElementById("delivery-location")?.addEventListener("change",function(){const deliveryCost=this.value==="inside_dhaka"?70:130;const deliveryCostElement=document.getElementById("delivery-cost");if(deliveryCostElement){deliveryCostElement.textContent=`৳${deliveryCost.toFixed(2)}`;}
updateGrandTotal();});document.querySelectorAll(".card").forEach(card=>{const unitPriceElement=card.querySelector(".unit-price");if(unitPriceElement){if(!unitPriceElement.dataset.unitPrice){unitPriceElement.dataset.unitPrice=getPrice(unitPriceElement.textContent);}
const quantityInput=card.querySelector(".cart-quantity");const quantity=parseInt(quantityInput?.value)||1;const totalPriceElement=card.querySelector(".item-total-price");if(totalPriceElement){totalPriceElement.textContent=`৳${(parseFloat(unitPriceElement.dataset.unitPrice) * quantity).toFixed(2)}`;}}});document.getElementById('apply-promo-btn')?.addEventListener('click',applyPromoCode);document.getElementById('promo-code-input')?.addEventListener('keypress',e=>{if(e.key==='Enter')applyPromoCode();});document.getElementById('remove-promo-btn')?.addEventListener('click',removePromoCode);updateSubtotal();const activePromo=document.getElementById('active-promo');if(activePromo){const promoCode=activePromo.querySelector('strong')?.textContent;if(promoCode){window.activePromoCode={code:promoCode,discount_type:'percentage',discount_value:0};updateGrandTotal();}}};initializeCart();});function showToast(message,duration=3000,backgroundColor){let toast=document.querySelector('.custom-toast');if(!toast){toast=document.createElement('div');toast.className='custom-toast';document.body.appendChild(toast);}
toast.textContent=message;if(backgroundColor){toast.style.backgroundColor=backgroundColor;}else{toast.style.backgroundColor='';}
toast.classList.add('show');const timer=setTimeout(()=>{toast.classList.remove('show');},duration);toast.addEventListener('click',()=>{clearTimeout(timer);toast.classList.remove('show');});}
window.showToast=showToast;document.addEventListener("DOMContentLoaded",()=>{const openSearchBtn=document.getElementById("open-search-window");const bottomSearchBtn=document.getElementById("bottom-open-search-window");const closeSearchBtn=document.getElementById("close-search-window");const searchWindow=document.getElementById("search-window");const overlay=document.getElementById("overlay");const bottomHeader=document.querySelector(".bottom-header");const mobileSearchInput=document.getElementById("mobile-search-input");const mobileSearchSuggestions=document.getElementById("mobile-search-suggestions");const mobileSearchForm=document.getElementById("mobile-search-form");let debounceTimer;const openSearchWindow=()=>{searchWindow.classList.add("active");overlay.classList.add("active");bottomHeader.style.display="none";mobileSearchInput.focus();};const closeSearchWindow=()=>{searchWindow.classList.remove("active");overlay.classList.remove("active");bottomHeader.style.display="flex";mobileSearchSuggestions.style.display="none";};if(openSearchBtn)openSearchBtn.addEventListener("click",(e)=>{e.preventDefault();openSearchWindow();});if(bottomSearchBtn)bottomSearchBtn.addEventListener("click",(e)=>{e.preventDefault();openSearchWindow();});if(closeSearchBtn)closeSearchBtn.addEventListener("click",closeSearchWindow);if(overlay)overlay.addEventListener("click",closeSearchWindow);if(mobileSearchInput){mobileSearchInput.addEventListener('input',function(e){clearTimeout(debounceTimer);const query=e.target.value.trim();if(query.length<2){mobileSearchSuggestions.innerHTML='';mobileSearchSuggestions.style.display='none';return;}
debounceTimer=setTimeout(()=>{fetchSearchResults(query,mobileSearchSuggestions);},300);});}
if(mobileSearchForm){mobileSearchForm.addEventListener('submit',function(e){e.preventDefault();const query=mobileSearchInput.value.trim();if(query){const firstSuggestion=mobileSearchSuggestions.querySelector('.suggestion-item');if(firstSuggestion){window.location.href=firstSuggestion.href;}else{window.location.href=`/search-results/?q=${encodeURIComponent(query)}`;}}});}});document.addEventListener('DOMContentLoaded',function(){const desktopSearchInput=document.getElementById('desktop-search-input');const desktopSearchSuggestions=document.getElementById('desktop-search-suggestions');const desktopSearchContainer=document.querySelector('.search-container');let debounceTimer;if(desktopSearchInput){desktopSearchInput.addEventListener('input',function(e){clearTimeout(debounceTimer);const query=e.target.value.trim();if(query.length<2){desktopSearchSuggestions.innerHTML='';desktopSearchSuggestions.style.display='none';return;}
debounceTimer=setTimeout(()=>{fetchSearchResults(query,desktopSearchSuggestions);},300);});}
document.addEventListener('click',function(e){if(desktopSearchContainer&&!desktopSearchContainer.contains(e.target)){desktopSearchSuggestions.style.display='none';}});});function fetchSearchResults(query,suggestionsElement){fetch(`/search/?q=${encodeURIComponent(query)}`,{headers:{'X-Requested-With':'XMLHttpRequest'}}).then(response=>{if(!response.ok)throw new Error('Network response was not ok');return response.json();}).then(data=>displaySuggestions(data,suggestionsElement)).catch(error=>{console.error('Fetch error:',error);suggestionsElement.innerHTML='<div class="suggestion-item no-results">Error loading results</div>';suggestionsElement.style.display='block';});}
function displaySuggestions(results,suggestionsElement){if(!results||results.length===0){suggestionsElement.innerHTML='<div class="suggestion-item no-results">No results found</div>';suggestionsElement.style.display='block';return;}
let html='';results.forEach(item=>{let url='#';let icon='bi-question-circle';let type='';if(item.model==='ourproduct'){url=`/product-details/${item.slug}/`;icon='bi-box-seam';type='Product';}else if(item.model==='productbrand'){url=`/brand-products/${item.slug}/`;icon='bi-tags';type='Brand';}else if(item.model==='featurecategory'){url=`/category-products/${item.slug}/`;icon='bi-list-ul';type='Category';}else if(item.model==='productsubcategory'){url=`/sub-category-products/${item.slug}/`;icon='bi-list-ul';type='Sub-Category';}
if(suggestionsElement.id==='mobile-search-suggestions'){html+=`
                <a href="${url}" class="suggestion-item" style="gap:10px">
                    <i class="bi ${icon} suggestion-icon"></i>
                    <span class="suggestion-text">${item.name}</span>
                </a>
            `;}
else{html+=`
                <a href="${url}" class="suggestion-item">
                    <span class="suggestion-text">${item.name}</span>
                    <span class="suggestion-type">${type}</span>
                </a>
            `;}});suggestionsElement.innerHTML=html;suggestionsElement.style.display='block';}
document.getElementById('subscribeForm').addEventListener('submit',function(e){e.preventDefault();let form=e.target;let formData=new FormData(form);let csrfToken=document.querySelector('[name=csrfmiddlewaretoken]').value;fetch('',{method:'POST',headers:{'X-Requested-With':'XMLHttpRequest','X-CSRFToken':csrfToken,},body:formData}).then(response=>response.json()).then(data=>{let alertWrapper=document.getElementById('subscribe-alert-wrapper');alertWrapper.innerHTML=`
            <div class="alert alert-${data.status === 'success' ? 'success' : 'danger'} alert-dismissible fade show" role="alert">
                <strong>${data.status === 'success' ? 'Success!' : 'Oops!'}</strong> ${data.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;if(data.status==='success'){form.reset();}}).catch(error=>{console.error('Error:',error);});});document.addEventListener("DOMContentLoaded",function(){var lazyImages=[].slice.call(document.querySelectorAll("img.lazyload"));if("IntersectionObserver"in window){let lazyImageObserver=new IntersectionObserver(function(entries,observer){entries.forEach(function(entry){if(entry.isIntersecting){let lazyImage=entry.target;lazyImage.src=lazyImage.dataset.src;lazyImageObserver.unobserve(lazyImage);}});});lazyImages.forEach(function(lazyImage){lazyImageObserver.observe(lazyImage);});}});function trackProductView(event){const productLink=event.target.closest('[data-product-slug]');if(productLink){event.preventDefault();const productSlug=productLink.dataset.productSlug;console.log('Tracking product:',productSlug);const csrfToken=document.querySelector('meta[name="csrf-token"]')?.content||document.cookie.match(/csrftoken=([^;]+)/)?.[1];fetch(`/api/track-product-view/${productSlug}/`,{method:'POST',headers:{'X-CSRFToken':csrfToken,'Content-Type':'application/json'},credentials:'same-origin'}).then(()=>{console.log('Tracking successful, navigating to:',productLink.href);window.location.href=productLink.href;}).catch(error=>{console.error('Tracking failed, navigating anyway:',error);window.location.href=productLink.href;});}}
document.addEventListener('click',trackProductView);window.addEventListener('load',()=>{document.querySelectorAll('[data-product-slug]').forEach(link=>{link.addEventListener('click',trackProductView);});});;